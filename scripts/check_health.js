// check_health.js - Script para verificar sa√∫de do servi√ßo
const axios = require('axios');
const dotenv = require('dotenv');
dotenv.config();

// Configura√ß√µes
const PORT = process.env.PORT || 8080;
const HEALTH_URL = `http://localhost:${PORT}/health`;
const ZAPI_INSTANCE_ID = process.env.ZAPI_INSTANCE_ID;
const ZAPI_INSTANCE_TOKEN = process.env.ZAPI_INSTANCE_TOKEN;
const ZAPI_CLIENT_TOKEN = process.env.ZAPI_CLIENT_TOKEN;

async function checkServerHealth() {
  try {
    console.log(`üîç Verificando servidor na porta ${PORT}...`);
    const response = await axios.get(HEALTH_URL, { timeout: 5000 });
    
    if (response.status === 200) {
      console.log('‚úÖ Servidor est√° respondendo corretamente.');
      return true;
    } else {
      console.error(`‚ùå Servidor retornou status ${response.status}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Servidor n√£o est√° respondendo:', error.message);
    return false;
  }
}

async function checkZAPIConnection() {
  try {
    if (!ZAPI_INSTANCE_ID || !ZAPI_INSTANCE_TOKEN || !ZAPI_CLIENT_TOKEN) {
      console.error('‚ùå Configura√ß√µes da Z-API incompletas. Verifique as vari√°veis de ambiente.');
      return false;
    }
    
    console.log('üîç Verificando conex√£o com Z-API...');
    const url = `https://api.z-api.io/instances/${ZAPI_INSTANCE_ID}/token/${ZAPI_INSTANCE_TOKEN}/status`;
    const { data } = await axios.get(url, { 
      headers: { 'Client-Token': ZAPI_CLIENT_TOKEN },
      timeout: 10000
    });
    
    console.log('üìä Status Z-API:', data);
    
    if (data.connected && data.smartphoneConnected) {
      console.log('‚úÖ Z-API conectada e smartphone pareado.');
      return true;
    } else {
      console.error('‚ùå Z-API desconectada ou smartphone n√£o pareado.');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar Z-API:', error.message);
    return false;
  }
}

async function main() {
  console.log('ü©∫ Iniciando verifica√ß√£o de sa√∫de do servi√ßo...');
  
  const serverOk = await checkServerHealth();
  const zapiOk = await checkZAPIConnection();
  
  if (serverOk && zapiOk) {
    console.log('\nüü¢ Sistema completamente operacional!\n');
    process.exit(0);
  } else {
    console.log('\nüî¥ O sistema apresenta problemas que precisam ser resolvidos.\n');
    process.exit(1);
  }
}

// Executa a verifica√ß√£o
main();
